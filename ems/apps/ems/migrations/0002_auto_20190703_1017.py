from datetime import datetime, timedelta
import random
import os
import json
from django.conf import settings
from django.db import migrations
# Generated by Django 2.2.3 on 2019-07-03 06:05

# from django.db import migrations


# class Migration(migrations.Migration):

#     dependencies = [
#         ('ems', '0001_initial'),
#     ]

#     operations = [
#     ]


def site_data(apps, schema_editor):

    if hasattr(settings, "DEVICE_TYPE"):
        DATA_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

        file_path = 'idu_sample_data.json' if settings.DEVICE_TYPE == 'idu' else 'odu_sample_data.json'
        data_file = os.path.join(DATA_DIR, 'data', file_path)

        if os.path.exists(data_file):
            with open(data_file, 'r') as f:
                data = json.load(f)

                if 'site' in data:
                    Site = apps.get_model('ems', 'Site')
                    s = Site()
                    s.name = data['site']['name'] + \
                        str(random.randint(1, 5000))
                    s.owner = data['site']['owner']
                    s.nms_ip = data['site']['nms_ip']
                    s.save()

                    if 'interfaces' in data:
                        Interface = apps.get_model('ems', 'Interface')
                        Element = apps.get_model('ems', 'Element')
                        State = apps.get_model('ems', 'State')
                        for interface in data['interfaces']:
                            i = Interface()
                            i.name = interface['name']
                            i.save()
                            if 'elements' in interface and len(interface['elements']):
                                for element in interface['elements']:
                                    e = Element()
                                    e.name = element['name']
                                    e.status = element['status']
                                    e.interface = i
                                    e.save()

                                    if 'statuses' in element:
                                        for status in range(0, len(element['statuses'])):
                                            st = State()
                                            st.element = e
                                            st.status = element['statuses'][status]
                                            st.created_on = datetime.now() - timedelta(hours=status)
                                            st.save()

                else:
                    print('no site element found')
        else:
            print('data file not found: ', data_file)


class Migration(migrations.Migration):

    dependencies = [
        ('ems', '0001_initial'),
    ]

    operations = [migrations.RunPython(site_data), ]
